/* auto-generated by gen_syscalls.py, don't edit */

#ifndef Z_INCLUDE_SYSCALLS_RADIO_DEVICE_H
#define Z_INCLUDE_SYSCALLS_RADIO_DEVICE_H


#include <zephyr/tracing/tracing_syscall.h>

#ifndef _ASMLANGUAGE

#include <stdarg.h>

#include <syscall_list.h>
#include <zephyr/syscall.h>

#include <zephyr/linker/sections.h>


#ifdef __cplusplus
extern "C" {
#endif

extern int z_impl_radio_device_receive(const struct device * dev, bool bit, uint32_t length, bool registration, struct radio_packet * pkt_ptr);

__pinned_func
static inline int radio_device_receive(const struct device * dev, bool bit, uint32_t length, bool registration, struct radio_packet * pkt_ptr)
{
#ifdef CONFIG_USERSPACE
	if (z_syscall_trap()) {
		union { uintptr_t x; const struct device * val; } parm0 = { .val = dev };
		union { uintptr_t x; bool val; } parm1 = { .val = bit };
		union { uintptr_t x; uint32_t val; } parm2 = { .val = length };
		union { uintptr_t x; bool val; } parm3 = { .val = registration };
		union { uintptr_t x; struct radio_packet * val; } parm4 = { .val = pkt_ptr };
		return (int) arch_syscall_invoke5(parm0.x, parm1.x, parm2.x, parm3.x, parm4.x, K_SYSCALL_RADIO_DEVICE_RECEIVE);
	}
#endif
	compiler_barrier();
	return z_impl_radio_device_receive(dev, bit, length, registration, pkt_ptr);
}

#if defined(CONFIG_TRACING_SYSCALL)
#ifndef DISABLE_SYSCALL_TRACING

#define radio_device_receive(dev, bit, length, registration, pkt_ptr) ({ 	int syscall__retval; 	sys_port_trace_syscall_enter(K_SYSCALL_RADIO_DEVICE_RECEIVE, radio_device_receive, dev, bit, length, registration, pkt_ptr); 	syscall__retval = radio_device_receive(dev, bit, length, registration, pkt_ptr); 	sys_port_trace_syscall_exit(K_SYSCALL_RADIO_DEVICE_RECEIVE, radio_device_receive, dev, bit, length, registration, pkt_ptr, syscall__retval); 	syscall__retval; })
#endif
#endif


extern int z_impl_radio_device_compare(const struct device * dev, struct radio_packet * pkt_ptr0, struct radio_packet * pkt_ptr1);

__pinned_func
static inline int radio_device_compare(const struct device * dev, struct radio_packet * pkt_ptr0, struct radio_packet * pkt_ptr1)
{
#ifdef CONFIG_USERSPACE
	if (z_syscall_trap()) {
		union { uintptr_t x; const struct device * val; } parm0 = { .val = dev };
		union { uintptr_t x; struct radio_packet * val; } parm1 = { .val = pkt_ptr0 };
		union { uintptr_t x; struct radio_packet * val; } parm2 = { .val = pkt_ptr1 };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_RADIO_DEVICE_COMPARE);
	}
#endif
	compiler_barrier();
	return z_impl_radio_device_compare(dev, pkt_ptr0, pkt_ptr1);
}

#if defined(CONFIG_TRACING_SYSCALL)
#ifndef DISABLE_SYSCALL_TRACING

#define radio_device_compare(dev, pkt_ptr0, pkt_ptr1) ({ 	int syscall__retval; 	sys_port_trace_syscall_enter(K_SYSCALL_RADIO_DEVICE_COMPARE, radio_device_compare, dev, pkt_ptr0, pkt_ptr1); 	syscall__retval = radio_device_compare(dev, pkt_ptr0, pkt_ptr1); 	sys_port_trace_syscall_exit(K_SYSCALL_RADIO_DEVICE_COMPARE, radio_device_compare, dev, pkt_ptr0, pkt_ptr1, syscall__retval); 	syscall__retval; })
#endif
#endif


extern int z_impl_radio_device_get_tx(const struct device * dev, struct radio_packet * pkt_ptr, uint32_t * value, uint32_t * length);

__pinned_func
static inline int radio_device_get_tx(const struct device * dev, struct radio_packet * pkt_ptr, uint32_t * value, uint32_t * length)
{
#ifdef CONFIG_USERSPACE
	if (z_syscall_trap()) {
		union { uintptr_t x; const struct device * val; } parm0 = { .val = dev };
		union { uintptr_t x; struct radio_packet * val; } parm1 = { .val = pkt_ptr };
		union { uintptr_t x; uint32_t * val; } parm2 = { .val = value };
		union { uintptr_t x; uint32_t * val; } parm3 = { .val = length };
		return (int) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_RADIO_DEVICE_GET_TX);
	}
#endif
	compiler_barrier();
	return z_impl_radio_device_get_tx(dev, pkt_ptr, value, length);
}

#if defined(CONFIG_TRACING_SYSCALL)
#ifndef DISABLE_SYSCALL_TRACING

#define radio_device_get_tx(dev, pkt_ptr, value, length) ({ 	int syscall__retval; 	sys_port_trace_syscall_enter(K_SYSCALL_RADIO_DEVICE_GET_TX, radio_device_get_tx, dev, pkt_ptr, value, length); 	syscall__retval = radio_device_get_tx(dev, pkt_ptr, value, length); 	sys_port_trace_syscall_exit(K_SYSCALL_RADIO_DEVICE_GET_TX, radio_device_get_tx, dev, pkt_ptr, value, length, syscall__retval); 	syscall__retval; })
#endif
#endif


#ifdef __cplusplus
}
#endif

#endif
#endif /* include guard */
