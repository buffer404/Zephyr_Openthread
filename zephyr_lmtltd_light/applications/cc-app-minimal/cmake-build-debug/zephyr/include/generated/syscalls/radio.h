/* auto-generated by gen_syscalls.py, don't edit */

#ifndef Z_INCLUDE_SYSCALLS_RADIO_H
#define Z_INCLUDE_SYSCALLS_RADIO_H


#include <zephyr/tracing/tracing_syscall.h>

#ifndef _ASMLANGUAGE

#include <stdarg.h>

#include <syscall_list.h>
#include <zephyr/syscall.h>

#include <zephyr/linker/sections.h>


#ifdef __cplusplus
extern "C" {
#endif

extern int z_impl_radio_configure(const struct device * dev, enum radio_driver_settings_type type, uint32_t value);

__pinned_func
static inline int radio_configure(const struct device * dev, enum radio_driver_settings_type type, uint32_t value)
{
#ifdef CONFIG_USERSPACE
	if (z_syscall_trap()) {
		union { uintptr_t x; const struct device * val; } parm0 = { .val = dev };
		union { uintptr_t x; enum radio_driver_settings_type val; } parm1 = { .val = type };
		union { uintptr_t x; uint32_t val; } parm2 = { .val = value };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_RADIO_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_radio_configure(dev, type, value);
}

#if defined(CONFIG_TRACING_SYSCALL)
#ifndef DISABLE_SYSCALL_TRACING

#define radio_configure(dev, type, value) ({ 	int syscall__retval; 	sys_port_trace_syscall_enter(K_SYSCALL_RADIO_CONFIGURE, radio_configure, dev, type, value); 	syscall__retval = radio_configure(dev, type, value); 	sys_port_trace_syscall_exit(K_SYSCALL_RADIO_CONFIGURE, radio_configure, dev, type, value, syscall__retval); 	syscall__retval; })
#endif
#endif


extern int z_impl_radio_rx_configure(const struct device * dev, radio_rx_callback_t callback, void * user_data);

__pinned_func
static inline int radio_rx_configure(const struct device * dev, radio_rx_callback_t callback, void * user_data)
{
#ifdef CONFIG_USERSPACE
	if (z_syscall_trap()) {
		union { uintptr_t x; const struct device * val; } parm0 = { .val = dev };
		union { uintptr_t x; radio_rx_callback_t val; } parm1 = { .val = callback };
		union { uintptr_t x; void * val; } parm2 = { .val = user_data };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_RADIO_RX_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_radio_rx_configure(dev, callback, user_data);
}

#if defined(CONFIG_TRACING_SYSCALL)
#ifndef DISABLE_SYSCALL_TRACING

#define radio_rx_configure(dev, callback, user_data) ({ 	int syscall__retval; 	sys_port_trace_syscall_enter(K_SYSCALL_RADIO_RX_CONFIGURE, radio_rx_configure, dev, callback, user_data); 	syscall__retval = radio_rx_configure(dev, callback, user_data); 	sys_port_trace_syscall_exit(K_SYSCALL_RADIO_RX_CONFIGURE, radio_rx_configure, dev, callback, user_data, syscall__retval); 	syscall__retval; })
#endif
#endif


extern int z_impl_radio_tx_transmit(const struct device * dev, uint32_t * data, size_t length);

__pinned_func
static inline int radio_tx_transmit(const struct device * dev, uint32_t * data, size_t length)
{
#ifdef CONFIG_USERSPACE
	if (z_syscall_trap()) {
		union { uintptr_t x; const struct device * val; } parm0 = { .val = dev };
		union { uintptr_t x; uint32_t * val; } parm1 = { .val = data };
		union { uintptr_t x; size_t val; } parm2 = { .val = length };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_RADIO_TX_TRANSMIT);
	}
#endif
	compiler_barrier();
	return z_impl_radio_tx_transmit(dev, data, length);
}

#if defined(CONFIG_TRACING_SYSCALL)
#ifndef DISABLE_SYSCALL_TRACING

#define radio_tx_transmit(dev, data, length) ({ 	int syscall__retval; 	sys_port_trace_syscall_enter(K_SYSCALL_RADIO_TX_TRANSMIT, radio_tx_transmit, dev, data, length); 	syscall__retval = radio_tx_transmit(dev, data, length); 	sys_port_trace_syscall_exit(K_SYSCALL_RADIO_TX_TRANSMIT, radio_tx_transmit, dev, data, length, syscall__retval); 	syscall__retval; })
#endif
#endif


extern int z_impl_radio_rx_enable(const struct device * dev);

__pinned_func
static inline int radio_rx_enable(const struct device * dev)
{
#ifdef CONFIG_USERSPACE
	if (z_syscall_trap()) {
		union { uintptr_t x; const struct device * val; } parm0 = { .val = dev };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_RADIO_RX_ENABLE);
	}
#endif
	compiler_barrier();
	return z_impl_radio_rx_enable(dev);
}

#if defined(CONFIG_TRACING_SYSCALL)
#ifndef DISABLE_SYSCALL_TRACING

#define radio_rx_enable(dev) ({ 	int syscall__retval; 	sys_port_trace_syscall_enter(K_SYSCALL_RADIO_RX_ENABLE, radio_rx_enable, dev); 	syscall__retval = radio_rx_enable(dev); 	sys_port_trace_syscall_exit(K_SYSCALL_RADIO_RX_ENABLE, radio_rx_enable, dev, syscall__retval); 	syscall__retval; })
#endif
#endif


extern int z_impl_radio_tx_enable(const struct device * dev);

__pinned_func
static inline int radio_tx_enable(const struct device * dev)
{
#ifdef CONFIG_USERSPACE
	if (z_syscall_trap()) {
		union { uintptr_t x; const struct device * val; } parm0 = { .val = dev };
		return (int) arch_syscall_invoke1(parm0.x, K_SYSCALL_RADIO_TX_ENABLE);
	}
#endif
	compiler_barrier();
	return z_impl_radio_tx_enable(dev);
}

#if defined(CONFIG_TRACING_SYSCALL)
#ifndef DISABLE_SYSCALL_TRACING

#define radio_tx_enable(dev) ({ 	int syscall__retval; 	sys_port_trace_syscall_enter(K_SYSCALL_RADIO_TX_ENABLE, radio_tx_enable, dev); 	syscall__retval = radio_tx_enable(dev); 	sys_port_trace_syscall_exit(K_SYSCALL_RADIO_TX_ENABLE, radio_tx_enable, dev, syscall__retval); 	syscall__retval; })
#endif
#endif


#ifdef __cplusplus
}
#endif

#endif
#endif /* include guard */
